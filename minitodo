#!/bin/sh

# Globals
STORAGEDIR=$HOME/.minitodo
SEP=';'
PROJNAME=
PROJDIR=

# Import config globals, $NAME and $FILEBROWSER
source $STORAGEDIR/config

function main {
  local cmd

  boot

  clear
  echo -e Project "\"$PROJNAME\"\n"
  list

  while true; do
    echo -en "\n> "
    read cmd

    if test "$cmd" = quit -o "$cmd" = q; then
      break
    fi

    runcmd $cmd
  done
}

function boot {
  touch $STORAGEDIR/projname
  PROJNAME=$(cat $STORAGEDIR/projname)

  if test -z "$PROJNAME"; then
    PROJNAME=default
    makeproj default
    echo $PROJNAME > $STORAGEDIR/projname
  fi

  PROJDIR=$STORAGEDIR/projects/$PROJNAME
}

function runcmd {
  local cmd=$1; shift

  clear
  echo -e Project "\"$PROJNAME\"\n"

  case $cmd in
    help) usage "$@" ;;
    proj) proj "$@" ;;
    new) new "$@" ;;
    sum) sum "$@" ;;
    attach) attach "$@" ;;
    ed) edit "$@" ;;
    up) up "$@" ;;
    down) down "$@" ;;
    tag) tag "$@" ;;
    detag) detag "$@" ;;
    ls) list_match_all_tags "$@" ;;
    l) list_match_all_tags "$@" ;;
    ls-any) list_match_any_tag "$@" ;;
    ls-title) list_match_title "$@" ;;
    close) close "$@" ;;
    cl) close "$@" ;;
    rm) remove "$@" ;;
    activity) activity "$@" ;;
    act) activity "$@" ;;
    tags) tags "$@" ;;
    discuss) discuss "$@" ;;
    say) discuss "$@" ;;
    discussion) discussion "$@" ;;
    talk) discussion "$@" ;;
    reindex) reindex "$@" ;;
    sync) sync "$@" ;;
    *)
      if echo $cmd | grep -q '^[0-9]\+$'; then
        sum $cmd
      else
        usage
      fi
      ;;
  esac
}

function usage {
  echo 'help | quit | q | proj | new | sum | <taskid> | ed | up | down | tag |'
  echo 'detag | attach | discuss | say | discussion | talk | tags | ls |'
  echo 'ls-any | ls-title | close | cl | rm | activity | act | sync | reindex'

  echo ''

  {
    echo 'help | Show this screen'
    echo 'quit or q | Quit'
    echo 'proj | List projects'
    echo 'proj <projname> | Switch to project'
    echo 'new | Create new task'
    echo 'sum <taskid> or <taskid> | Show task summary'
    echo 'ed <taskid> | Edit basic task info'
    echo 'up <taskid> | Increase the priority of the task by 1'
    echo 'down <taskid> | Decrease the priority of the task by 1'
    echo 'tag <taskid> <tag1> [<tag2> ...] | Add tags to task'
    echo 'detag <taskid> <tag1> [<tag2> ...] | Remove tags from task'
    echo 'attach <taskid> | Open attachments directory'
    echo 'discuss <taskid> or say <taskid> | Add a new comment to this task'
    echo 'discussion <taskid> or talk <taskid> | List all comments of this task'
    echo 'tags | Show all tags'
    echo 'ls or l | List all tasks'
    echo 'ls <tag1> <tag2> .. | List tasks filtered by all matching tags'
    echo 'ls-any <tag1> <tag2> .. | List tasks filtered by any matching tag'
    echo 'ls-title <search-text> | List tasks that contain the text <search-text> in their title'
    echo 'close <taskid> or cl <taskid> | Close and archive task'
    echo 'rm <taskid> | Remove task'
    echo 'activity or act | Display activity log'
    echo 'sync | Send your updates to your target task repository'
    echo 'reindex | Update the index file, for advanced use. If for any reason you suspect that the task list and the task files go out of sync, you can reindex.'
  } | column -ts'|'
}

function proj {
  if test -z "$1"; then
    ls $STORAGEDIR/projects
    return
  fi

  makeproj "$1"

  PROJNAME="$1"
  PROJDIR=$STORAGEDIR/projects/$PROJNAME

  echo $PROJNAME > $STORAGEDIR/projname

  runcmd ls
}

function makeproj {
  local projname="$1"
  local projdir=$STORAGEDIR/projects/"$projname"

  mkdir -p $projdir/tasks/open
  mkdir $projdir/tasks/closed
  touch $projdir/index.csv
}

function new {
  local lasttaskno=$(
    ls $PROJDIR/tasks/open | sort -hr | head -n 1
  )
  local taskno=$(expr $lasttaskno + 1)
  local taskdir=$PROJDIR/tasks/open/$taskno
  local taskfile=$taskdir/task.yaml

  mkdir $taskdir

  echo 'name: ' >> $taskfile
  echo 'tags: ' >> $taskfile
  echo 'priority: 5' >> $taskfile
  echo 'description: | ' >> $taskfile
  echo '  ' >> $taskfile

  $EDITOR $taskfile

  if ! test -f $taskfile; then  # if user quit without saving
    return
  fi

  reindexsingle $taskno

  logactivity new $taskno

  list
}

function sum {
  local taskno=$1
  local taskdir=$PROJDIR/tasks/open/$taskno
  local attachdir=$taskdir/attachments
  local discussdir=$taskdir/discussion
  local totalattachments filename filetype filesize
  local totalcomments commenters

  if ! test -d $taskdir; then
    echo "Task #$taskno does not exist!"
    return
  fi

  echo "#$taskno"
  cat $taskdir/task.yaml

  echo -en '\nAttachments: '
  mkdir -p $attachdir
  totalattachments=$(ls $attachdir | wc -l)

  if test $totalattachments = 0; then
    echo None
  else
    echo ''

    ls $attachdir | while read filename; do
      filetype=$(file -b --mime-type $attachdir/$filename)
      filesize=$(du -h $attachdir/$filename | cut -f1)
      echo $filename,$filetype,$filesize
    done | column -ts,
  fi

  echo -en '\nDiscussion: '
  mkdir -p $discussdir
  totalcomments=$(ls $discussdir | wc -l)
  commenters=$(ls $discussdir | cut -d- -f2 | sort | uniq | paste -sd,)

  echo -n "$totalcomments comments"
  if test -n "$commenters"; then
    echo " between $commenters"
  fi
  echo ''
}

function attach {
  local taskno=$1
  local attachdir=$PROJDIR/tasks/open/$taskno/attachments

  if test -z $FILEBROWSER; then
    echo You did not provide a filebrowser!! Please configure it!
    echo Attach cancelled!
    return
  fi

  if test -z $taskno; then
    echo 'You must provide a task number!'
    return
  elif ! test -n "$taskdir" -a -d "$taskdir"; then
    echo "Task #$taskno does not exist!"
    return
  fi

  if echo $FILEBROWSER | grep -qE '^(sh|dash|bash)$'; then
    $FILEBROWSER -c "cd $attachdir; $SHELL"
  else
    $FILEBROWSER $attachdir
  fi

  logactivity attach $taskno

  sum $taskno
}

function edit {
  local taskno=$1
  local taskfile=$PROJDIR/tasks/open/$taskno/task.yaml
  $EDITOR $taskfile

  reindexsingle $taskno

  logactivity edit $taskno

  sum $taskno
}

function up {
  local taskno=$1
  reprioritize $taskno '+'
}

function down {
  local taskno=$1
  reprioritize $taskno '-'
}

function reprioritize {
  local taskno=$1
  local operation=$2

  local taskfile=$PROJDIR/tasks/open/$taskno/task.yaml
  local priority=$(select_from_index $taskno priority)
  local newpriority=$(expr $priority $operation 1)

  sed -i "3s/[0-9]$/$newpriority/" $taskfile
  reindexsingle $taskno

  logactivity reprioritize $taskno $newpriority

  list
}

function tag {
  local taskno=$1; shift
  addtags $taskno "$@"
  logactivity tag $taskno "$@"
  sum $taskno
}

function detag {
  local taskno=$1; shift
  rmtags $taskno "$@"
  logactivity detag $taskno "$@"
  sum $taskno
}

function addtags {
  local taskno=$1; shift
  local tags="$@"

  updatetags $taskno add "$tags"
}

function rmtags {
  local taskno=$1; shift
  local tags="$@"

  updatetags $taskno remove "$tags"
}

function updatetags {
  local taskno=$1
  local subcmd=$2
  shift 2
  local enteredtags=$(echo "$@" | tr ' ' '\n')
  local currenttags=$(select_from_taskfile $taskno tags | tr ' ' '\n')
  local taskfile=$PROJDIR/tasks/open/$taskno/task.yaml
  local updatedtags

  if test $subcmd = add; then
    updatedtags=$(echo -e "$enteredtags\n$currenttags" \
                  | grep -v ^$ \
                  | sort \
                  | uniq \
                  | paste -sd' ')
  elif test $subcmd = remove; then
    updatedtags=$(echo "$currenttags" | grep -Fxv "$enteredtags" | paste -sd' ')
  fi

  sed -i "2s/.*/tags: $updatedtags/" $taskfile

  reindexsingle $taskno
}

function tags {
  local indexfile=$PROJDIR/index.csv
  cat $indexfile | cut -d$SEP -f3 | tr ' ' '\n' | sort | uniq -c | sort -nr
}

function list_match_all_tags {
  list tagfilter "$@"
}

function list_match_any_tag {
  list tagfilterany "$@"
}

function list_match_title {
  list titlefilter "$@"
}

function list {
  local subcmd=$1; shift
  local filter="$@"
  local headerline=no${SEP}name${SEP}tags${SEP}pri
  local indexfile=$PROJDIR/index.csv
  local indexrecordnum=$(cat $indexfile 2>/dev/null | wc -l)

  if test $indexrecordnum -eq 0; then
    echo 'Nothing to do! Yeah!!'
    return
  fi

  body=$(
    if test -z "$filter"; then
      cat $indexfile
    else
      case $subcmd in
        tagfilter) filterbytag $indexfile "$filter" ;;
        tagfilterany) filterbytag -any $indexfile "$filter" ;;
        titlefilter) cat $indexfile | grep -i $1 ;;
        *) cat $indexfile ;;
      esac
    fi |\
    sort -nr -t';' -k4
  )

  echo -e "$headerline\n$body" | column -ts $SEP
}

function filterbytag {
  local mode record

  if test $1 = '-any'; then
    shift
    mode='any'
  else
    mode='all'
  fi

  local targetfile=$1
  local filter="$2"

  local searchtags=$(echo "$filter" | tr ' ' '\n')
  local totalsearchtags=$(echo "$searchtags" | wc -l)

  cat $targetfile | while read record; do
    local recordtags=$(echo $record | cut -d$SEP -f 3 | tr ' ' '\n')

    local totalmatchingtags=$(
      echo "$recordtags" | grep -Fx "$searchtags" | wc -l
    )

    if test $mode = 'any' -a $totalmatchingtags -gt 0; then
      echo $record
    elif test $mode = 'all' -a $totalsearchtags -eq $totalmatchingtags; then
      echo $record
    fi
  done
}

function close {
  local taskno=$1
  local indexfile=$PROJDIR/index.csv
  local indexclosedfile=$PROJDIR/indexclosed.csv

  addtags $taskno _closed_

  createindex $1 >> $indexclosedfile
  sed -i "/^${taskno}${SEP}/d" $indexfile

  mv $PROJDIR/tasks/open/$taskno $PROJDIR/tasks/closed/$taskno

  logactivity close

  list
}

function remove {
  taskno=$1
  rm -r $PROJDIR/tasks/open/$taskno
  sed -i /^${taskno}${SEP}/d $PROJDIR/index.csv

  logactivity remove $taskno

  list
}

function activity {
  cat $PROJDIR/activity
}

function discuss {
  local taskno=$1
  local discussdir=$PROJDIR/tasks/open/$taskno/discussion
  local timestamp=$(date +%s)
  local commenter=$NAME
  local commentfilename=$discussdir/$timestamp-$commenter

  mkdir -p $discussdir

  $EDITOR $commentfilename

  if test -f $commentfilename; then
    logactivity discuss $taskno
  fi

  discussion $1
}

function discussion {
  local taskno=$1
  local discussdir=$PROJDIR/tasks/open/$taskno/discussion
  local taskname=$(createindex $1 | cut -d$SEP -f2)
  local commenttimestamp commenter commentdate

  echo -e "Discussion of #$taskno $taskname:\n"

  ls $discussdir | while read filename; do
    commenttimestamp=$(echo $filename | cut -d- -f1)
    commenter=$(echo $filename | cut -d- -f2)
    commentdate=$(date --date="@$commenttimestamp" +'%d %b %H:%M')

    echo $commenter said at $commentdate:
    cat $discussdir/$filename
    echo -e '\n'
  done
}

function logactivity {
  local action=$1
  local taskid=$2
  shift 2
  local taskname=$(select_from_index $taskid name)
  local tasksign="#$taskid: \"$taskname\""
  local user=$NAME
  local now=$(date +'%d %b %H:%M')
  local msg

  case $action in
    new)
      msg="$user created task $tasksign."
      ;;

    attach)
      msg="$user updated attachments of task $tasksign."
      ;;

    edit)
      msg="$user edited task $tasksign."
      ;;

    reprioritize)
      msg="$user set the priority of task $tasksign to $1."
      ;;

    tag)
      msg="$user added tags \"$@\" to task $tasksign."
      ;;

    detag)
      msg="$user removed tags \"$@\" from task $tasksign."
      ;;

    close)
      msg="$user closed task $tasksign."
      ;;

    remove)
      msg="$user removed task $tasksign."
      ;;

    discuss)
      msg="$user commented on task $tasksign."
      ;;

  esac

  echo "$msg" >> $PROJDIR/activity
}

function sync {
  local syncnote

  if ! which git; then
    echo You need to have Git installed to be able to synchronize!!
    echo Sync cancelled!
    return
  fi

  if test -n "$1"; then
    syncnote="$1"
  else
    syncnote='love me two times baby'
  fi

  pushd $PROJDIR 2>/dev/null

  if test -d .git; then
    git fetch
    git merge origin/master
  else
    echo 'You will synchronize this project for the first time.'
    echo -n 'Please type your target git repo address: '
    read gitaddr

    git init
    git remote add origin $gitaddr
    git fetch

    if git branch -r | grep -q origin/master; then
      git branch master origin/master
    fi
  fi

  if test -n "$(git status --porcelain)"; then
    git add .
    git commit -m "$syncnote"
    git push origin master
  fi

  popd 2>/dev/null
}

function reindex {
  local indexfile=$PROJDIR/index.csv
  local taskno updatedindex

  cat /dev/null > $indexfile

  ls $PROJDIR/tasks/open | grep -v index.csv | while read taskno; do
    updatedindex=$(createindex $taskno)
    echo $updatedindex >> $indexfile
  done
}

function reindexsingle {
  local taskno=$1
  local updatedindex=$(createindex $taskno)
  local indexfile=$PROJDIR/index.csv

  touch $indexfile

  if grep -q ^${taskno}${SEP} $indexfile; then
    sed -i "s/^${taskno}${SEP}.*$/$updatedindex/" $indexfile
  else
    echo $updatedindex >> $indexfile
  fi
}

function createindex {
  local taskno=$1
  local taskfile=$PROJDIR/tasks/open/$taskno/task.yaml

  echo -n $taskno$SEP
  select_from_taskfile $taskno name tags priority | tr ';' $SEP
}

function select_from_index {
  local taskno=$1; shift
  local colnames="$@"
  local indexfile=$PROJDIR/index.csv
  local record=$(cat $indexfile | grep ^$taskno$SEP)
  local colname colno

  echo "$colnames" | tr ' ' '\n' | while read colname; do
    case $colname in
      name) colno=2 ;;
      tags) colno=3 ;;
      priority) colno=4 ;;
      *) echo ''; return ;;
    esac

    echo $record | cut -d$SEP -f $colno
  done |\
  paste -sd';'
}

function select_from_taskfile {
  local taskno=$1; shift
  local colnames="$@"
  local taskfile=$PROJDIR/tasks/open/$taskno/task.yaml
  local colname lineno

  echo "$colnames" | tr ' ' '\n' | while read colname; do
    case $colname in
      name) lineno=1 ;;
      tags) lineno=2 ;;
      priority) lineno=3 ;;
      *) echo ''; return ;;
    esac

    cat $taskfile | sed $lineno'q;d' | cut -d: -f2 | sed 's/^ \+//'
  done |\
  paste -sd';'
}

main "$@"
