#!/bin/sh

# Globals
STORAGEDIR="$HOME/.minitodo"
SEP=';'
PROJNAME=
PROJDIR=

# Import config globals, $NAME and $FILEBROWSER
. "$STORAGEDIR/config"

main() {
  cmd=

  boot

  clear
  echo -e Project "\"$PROJNAME\"\\n"
  list

  while true; do
    echo -en "\\n> "
    read -r cmd

    if test "$cmd" = quit -o "$cmd" = q; then
      break
    fi

    runcmd $cmd
  done
}

boot() {
  touch $STORAGEDIR/projname
  PROJNAME=$(cat $STORAGEDIR/projname)

  if test -z "$PROJNAME"; then
    PROJNAME=default
    makeproj default
    echo $PROJNAME > $STORAGEDIR/projname
  fi

  PROJDIR=$STORAGEDIR/projects/$PROJNAME
}

runcmd() {
  cmd=$1; shift

  clear
  echo -e Project "\"$PROJNAME\"\\n"

  case $cmd in
    help) usage "$@" ;;
    proj) proj "$@" ;;
    p) proj "$@" ;;
    new) new "$@" ;;
    sum) sum "$@" ;;
    attach) attach "$@" ;;
    ed) edit "$@" ;;
    up) up "$@" ;;
    down) down "$@" ;;
    tag) tag "$@" ;;
    detag) detag "$@" ;;
    ls) list_match_all_tags "$@" ;;
    l) list_match_all_tags "$@" ;;
    ls-any) list_match_any_tag "$@" ;;
    lsa) list_match_any_tag "$@" ;;
    ls-title) list_match_title "$@" ;;
    lst) list_match_title "$@" ;;
    close) close "$@" ;;
    cl) close "$@" ;;
    rm) remove "$@" ;;
    activity) activity "$@" ;;
    act) activity "$@" ;;
    tags) tags "$@" ;;
    discuss) discuss "$@" ;;
    say) discuss "$@" ;;
    discussion) discussion "$@" ;;
    talk) discussion "$@" ;;
    reindex) reindex "$@" ;;
    sync) sync "$@" ;;
    *)
      if echo $cmd | grep -q '^[0-9]\+$'; then
        sum $cmd
      else
        usage
      fi
      ;;
  esac
}

usage() {
  echo 'help | quit | q | proj | p | new | sum | <taskid> | ed | up | down |'
  echo 'tag | detag | attach | discuss | say | discussion | talk | tags |'
  echo 'ls | l | ls-any | lsa | ls-title | lst | close | cl | rm | activity |'
  echo 'act | sync | reindex'

  echo ''

  {
    echo 'help | Show this screen'
    echo 'quit or q | Quit'
    echo 'proj or p | List projects'
    echo 'proj or p <name> | Switch to project'
    echo 'new | Open system editor to create new task'
    echo 'new <name> | Create new task immediately with the given name'
    echo 'sum <id> or <id> | Show task summary'
    echo 'ed <id> | Edit basic task info'
    echo 'up <id> | Increase the priority of the task by 1'
    echo 'down <id> | Decrease the priority of the task by 1'
    echo 'tag <id> <tag1> [<tag2> ...] | Add tags to task'
    echo 'detag <id> <tag1> [<tag2> ...] | Remove tags from task'
    echo 'attach <id> | Open attachments directory with the configured file browser'
    echo 'discuss or say <id> | Add a new comment to this task'
    echo 'discussion or talk <id> | List all comments of this task'
    echo 'tags | Show all tags'
    echo 'ls or l | List all tasks'
    echo 'ls or l <tag1> <tag2> .. | List tasks filtered by all matching tags'
    echo 'ls-any or lsa <tag1> <tag2> .. | List tasks filtered by any matching tag'
    echo 'ls-title or lst <search-text> | List tasks that contain the text <search-text> in their title'
    echo 'close or cl <id> | Close and archive task'
    echo 'rm <id> | Remove task'
    echo 'activity or act | Display activity log'
    echo 'sync | Send your updates to your target task repository'
    echo 'reindex | Update the index file, for advanced use. If for any reason you suspect that the task list and the task files go out of sync, you can reindex.'
  } | column -ts'|'
}

proj() {
  if test -z "$1"; then
    ls -1 $STORAGEDIR/projects
    return
  fi

  makeproj "$1"

  PROJNAME="$1"
  PROJDIR=$STORAGEDIR/projects/$PROJNAME

  echo $PROJNAME > $STORAGEDIR/projname

  runcmd ls
}

makeproj() {
  projname="$1"
  projdir=$STORAGEDIR/projects/"$projname"

  mkdir -p $projdir/tasks/open
  mkdir $projdir/tasks/closed
  touch $projdir/index.csv
}

new() {
  optionaltaskname="$@"
  lasttaskno=$(
    ls $PROJDIR/tasks/open | sort -hr | head -n 1
  )
  taskno=$((lasttaskno + 1))
  taskdir=$PROJDIR/tasks/open/$taskno
  taskfile=$taskdir/task.yaml
  tmptaskfile=/tmp/minitodo_newtask_$(date +%s).yaml
  template=$({
    echo 'name: '
    echo 'tags: '
    echo 'priority: 5'
    echo 'description: | '
    echo '  '
  })

  echo "$template" > $tmptaskfile

  if test -n "$optionaltaskname"; then
    sed -i "1s/$/$optionaltaskname/" $tmptaskfile
  else
    $EDITOR $tmptaskfile
  fi

  if echo "$template" | diff - $tmptaskfile >/dev/null; then
    # user did not change or save the file
    echo Canceled task creation
    echo
  else
    mkdir $taskdir
    cp $tmptaskfile $taskfile
    reindexsingle $taskno
    logactivity new $taskno
  fi

  list
}

sum() {
  taskno=$1
  taskdir=$PROJDIR/tasks/open/$taskno
  attachdir=$taskdir/attachments
  discussdir=$taskdir/discussion
  totalattachments=
  filename=
  filetype=
  filesize=
  totalcomments=
  commenters=

  if ! test -d $taskdir; then
    echo "Task #$taskno does not exist!"
    return
  fi

  echo "#$taskno"
  cat $taskdir/task.yaml

  echo -en '\nAttachments: '
  mkdir -p $attachdir
  totalattachments=$(ls $attachdir | wc -l)

  if test $totalattachments = 0; then
    echo None
  else
    echo ''

    ls $attachdir | while read -r filename; do
      filetype=$(file -b --mime-type $attachdir/$filename)
      filesize=$(du -h $attachdir/$filename | cut -f1)
      echo $filename,$filetype,$filesize
    done | column -ts,
  fi

  echo -en '\nDiscussion: '
  mkdir -p $discussdir
  totalcomments=$(ls $discussdir | wc -l)
  commenters=$(ls $discussdir | cut -d- -f2 | sort | uniq | paste -sd,)

  echo -n "$totalcomments comments"
  if test -n "$commenters"; then
    echo " between $commenters"
  fi
  echo ''

  echo -n 'Latest comment: '
  displaycomment "$(ls $discussdir | tail -n 1)"
}

attach() {
  taskno=$1
  attachdir=$PROJDIR/tasks/open/$taskno/attachments

  if test -z $FILEBROWSER; then
    echo You did not provide a filebrowser!! Please configure it!
    echo Attach cancelled!
    return
  fi

  if test -z $taskno; then
    echo 'You must provide a task number!'
    return
  elif ! test -n "$taskdir" -a -d "$taskdir"; then
    echo "Task #$taskno does not exist!"
    return
  fi

  if echo $FILEBROWSER | grep -qE '^(sh|dash|bash)$'; then
    $FILEBROWSER -c "cd $attachdir; $SHELL"
  else
    $FILEBROWSER $attachdir
  fi

  logactivity attach $taskno

  sum $taskno
}

edit() {
  taskno=$1
  taskfile=$PROJDIR/tasks/open/$taskno/task.yaml
  $EDITOR $taskfile

  reindexsingle $taskno

  logactivity edit $taskno

  sum $taskno
}

up() {
  taskno=$1
  reprioritize $taskno '+'
}

down() {
  taskno=$1
  reprioritize $taskno '-'
}

reprioritize() {
  taskno=$1
  operation=$2

  taskfile=$PROJDIR/tasks/open/$taskno/task.yaml
  priority=$(select_from_index $taskno priority)
  newpriority=$(($priority $operation 1))

  sed -i "3s/[0-9]\+$/$newpriority/" $taskfile
  reindexsingle $taskno

  logactivity reprioritize $taskno $newpriority

  list
}

tag() {
  taskno=$1; shift
  addtags $taskno "$@"
  logactivity tag $taskno "$@"
  sum $taskno
}

detag() {
  taskno=$1; shift
  rmtags $taskno "$@"
  logactivity detag $taskno "$@"
  sum $taskno
}

addtags() {
  taskno=$1; shift
  tags="$@"

  updatetags $taskno add "$tags"
}

rmtags() {
  taskno=$1; shift
  tags="$@"

  updatetags $taskno remove "$tags"
}

updatetags() {
  taskno=$1
  subcmd=$2
  shift 2
  enteredtags=$(echo "$@" | tr ' ' '\n')
  currenttags=$(select_from_taskfile $taskno tags | tr ' ' '\n')
  taskfile=$PROJDIR/tasks/open/$taskno/task.yaml
  updatedtags=

  if test $subcmd = add; then
    updatedtags=$(echo -e "$enteredtags\\n$currenttags" \
                  | grep -v ^$ \
                  | sort \
                  | uniq \
                  | paste -sd' ')
  elif test $subcmd = remove; then
    updatedtags=$(echo "$currenttags" | grep -Fxv "$enteredtags" | paste -sd' ')
  fi

  sed -i "2s/.*/tags: $updatedtags/" $taskfile

  reindexsingle $taskno
}

tags() {
  indexfile=$PROJDIR/index.csv
  <$indexfile cut -d$SEP -f3 | tr ' ' '\n' | sort | uniq -c | sort -nr
}

list_match_all_tags() {
  list tagfilter "$@"
}

list_match_any_tag() {
  list tagfilterany "$@"
}

list_match_title() {
  list titlefilter "$@"
}

list() {
  subcmd=$1; shift
  filter="$@"
  headerline=no${SEP}name${SEP}tags${SEP}pri
  indexfile=$PROJDIR/index.csv
  indexrecordnum=$(<$indexfile wc -l 2>/dev/null)

  if test $indexrecordnum -eq 0; then
    echo 'Nothing to do! Yeah!!'
    return
  fi

  body=$(
    if test -z "$filter"; then
      cat $indexfile
    else
      case $subcmd in
        tagfilter) filterbytag $indexfile "$filter" ;;
        tagfilterany) filterbytag -any $indexfile "$filter" ;;
        titlefilter) <$indexfile grep -i $1 ;;
        *) cat $indexfile ;;
      esac
    fi |\
    sort -nr -t';' -k4
  )

  echo -e "$headerline\\n$body" | column -ts $SEP
}

filterbytag() {
  mode=
  record=

  if test $1 = '-any'; then
    shift
    mode='any'
  else
    mode='all'
  fi

  targetfile=$1
  filter="$2"

  searchtags=$(echo "$filter" | tr ' ' '\n')
  totalsearchtags=$(echo "$searchtags" | wc -l)

  cat $targetfile | while read -r record; do
    recordtags=$(echo $record | cut -d$SEP -f 3 | tr ' ' '\n')

    totalmatchingtags=$(echo "$recordtags" | grep -Fxc "$searchtags")

    if test $mode = 'any' -a $totalmatchingtags -gt 0; then
      echo $record
    elif test $mode = 'all' -a $totalsearchtags -eq $totalmatchingtags; then
      echo $record
    fi
  done
}

close() {
  taskno=$1
  indexfile=$PROJDIR/index.csv
  indexclosedfile=$PROJDIR/indexclosed.csv

  addtags $taskno _closed_

  createindex $1 >> $indexclosedfile
  sed -i "/^${taskno}${SEP}/d" $indexfile

  mv $PROJDIR/tasks/open/$taskno $PROJDIR/tasks/closed/$taskno

  logactivity close

  list
}

remove() {
  taskno=$1
  rm -r $PROJDIR/tasks/open/$taskno
  sed -i /^${taskno}${SEP}/d $PROJDIR/index.csv

  logactivity remove $taskno

  list
}

activity() {
  cat $PROJDIR/activity
}

discuss() {
  taskno=$1
  discussdir=$PROJDIR/tasks/open/$taskno/discussion
  timestamp=$(date +%s)
  commenter=$NAME
  commentfilename=$discussdir/$timestamp-$commenter

  mkdir -p $discussdir

  $EDITOR $commentfilename

  if test -f $commentfilename; then
    logactivity discuss $taskno
  fi

  discussion $1
}

discussion() {
  taskno=$1
  discussdir=$PROJDIR/tasks/open/$taskno/discussion
  taskname=$(createindex $1 | cut -d$SEP -f2)
  commenttimestamp=
  commenter=
  commentdate=

  echo -e "Discussion of #$taskno $taskname:\\n"

  ls $discussdir | while read -r filename; do
    displaycomment "$filename"
  done
}

displaycomment() {
  filename="$1"
  commenttimestamp=$(echo $filename | cut -d- -f1)
  commenter=$(echo $filename | cut -d- -f2)
  commentdate=$(date --date="@$commenttimestamp" +'%d %b %H:%M')

  echo $commenter said at $commentdate:
  cat $discussdir/$filename
  echo -e '\n'
}

logactivity() {
  action=$1
  taskid=$2
  shift 2
  taskname=$(select_from_index $taskid name)
  tasksign="#$taskid: \"$taskname\""
  user=$NAME
  now=$(date +'%d %b %H:%M')
  msg=

  case $action in
    new)
      msg="$user created task $tasksign."
      ;;

    attach)
      msg="$user updated attachments of task $tasksign."
      ;;

    edit)
      msg="$user edited task $tasksign."
      ;;

    reprioritize)
      msg="$user set the priority of task $tasksign to $1."
      ;;

    tag)
      msg="$user added tags \"$@\" to task $tasksign."
      ;;

    detag)
      msg="$user removed tags \"$@\" from task $tasksign."
      ;;

    close)
      msg="$user closed task #$taskno."
      ;;

    remove)
      msg="$user removed task $tasksign."
      ;;

    discuss)
      msg="$user commented on task $tasksign."
      ;;

  esac

  echo "$now: $msg" >> $PROJDIR/activity
}

sync() {
  syncnote=

  if ! which git; then
    echo You need to have Git installed to be able to synchronize!!
    echo Sync cancelled!
    return
  fi

  if test -n "$1"; then
    syncnote="$1"
  else
    syncnote='love me two times baby'
  fi

  pushd $PROJDIR >/dev/null

  if test -d .git; then
    git fetch
    git merge origin/master
  else
    echo 'You will synchronize this project for the first time.'
    echo -n 'Please type your target git repo address: '
    read -r gitaddr

    git init
    git remote add origin $gitaddr
    git fetch

    if git branch -r | grep -q origin/master; then
      git branch master origin/master
    fi
  fi

  if test -n "$(git status --porcelain)"; then
    git add .
    git commit -m "$syncnote"
    git push origin master
  fi

  popd >/dev/null
}

reindex() {
  indexfile=$PROJDIR/index.csv
  taskno=
  updatedindex=

  cat /dev/null > $indexfile

  ls $PROJDIR/tasks/open | while read -r taskno; do
    updatedindex=$(createindex $taskno)
    echo $updatedindex >> $indexfile
  done
}

reindexsingle() {
  taskno=$1
  updatedindex=$(createindex $taskno)
  indexfile=$PROJDIR/index.csv

  touch $indexfile

  if grep -q ^${taskno}${SEP} $indexfile; then
    sed -i "s/^${taskno}${SEP}.*$/$updatedindex/" $indexfile
  else
    echo $updatedindex >> $indexfile
  fi
}

createindex() {
  taskno=$1
  taskfile=$PROJDIR/tasks/open/$taskno/task.yaml

  echo -n $taskno$SEP
  select_from_taskfile $taskno name tags priority | tr ';' $SEP
}

select_from_index() {
  taskno=$1; shift
  colnames="$@"
  indexfile=$PROJDIR/index.csv
  record=$(<$indexfile grep ^$taskno$SEP)
  colname=
  colno=

  echo "$colnames" | tr ' ' '\n' | while read -r colname; do
    case $colname in
      name) colno=2 ;;
      tags) colno=3 ;;
      priority) colno=4 ;;
      *) echo ''; return ;;
    esac

    echo $record | cut -d$SEP -f $colno
  done |\
  paste -sd';'
}

select_from_taskfile() {
  taskno=$1; shift
  colnames="$@"
  taskfile=$PROJDIR/tasks/open/$taskno/task.yaml
  colname=
  lineno=

  echo "$colnames" | tr ' ' '\n' | while read -r colname; do
    case $colname in
      name) lineno=1 ;;
      tags) lineno=2 ;;
      priority) lineno=3 ;;
      *) echo ''; return ;;
    esac

    <$taskfile sed $lineno'q;d' | cut -d: -f2 | sed 's/^ \+//'
  done |\
  paste -sd';'
}

main "$@"
